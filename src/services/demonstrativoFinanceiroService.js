const axios = require("axios");

/**
 * Servi√ßo para consulta de Demonstrativo Financeiro
 */
class DemonstrativoFinanceiroService {
  constructor() {
    this.sessoes = new Map(); // Armazena dados das sess√µes por usu√°rio
    this.apiUrl =
      "https://homologacao.abaco.com.br/arapiraca_proj_hml_eagata/servlet/apapidocumento";

    // CPF fake para contornar valida√ß√£o da API (a API n√£o utiliza na pr√°tica)
    this.cpfFake = "11111111111";

    // M√©tricas de monitoramento
    this.metrics = {
      tentativasConsulta: 0,
      sucessos: 0,
      erros: 0,
      sessoesCriadas: 0,
      sessoesCanceladas: 0,
      tempoMedioProcessamento: [],
    };
  }

  /**
   * Inicia o fluxo de consulta de Demonstrativo Financeiro
   * @param {string} sender - ID do usu√°rio
   * @param {string} nome - Nome do usu√°rio
   * @returns {Object} Resposta para o usu√°rio
   */
  iniciarConsultaDemonstrativo(sender, nome) {
    this.limparSessao(sender);
    this.setSessao(sender, { etapa: "tipo_contribuinte", nome });
    this.metrics.sessoesCriadas++;

    return {
      type: "text",
      text: `üìä *Demonstrativo Financeiro*

${nome}, vou ajud√°-lo a consultar e emitir o Demonstrativo Financeiro de forma *r√°pida e autom√°tica*!

üìã *O que √© o Demonstrativo Financeiro?*
O Demonstrativo Financeiro √© um documento que cont√©m informa√ß√µes detalhadas sobre:
‚Ä¢ D√©bitos pendentes
‚Ä¢ Hist√≥rico de pagamentos
‚Ä¢ Situa√ß√£o fiscal atual
‚Ä¢ Valores em aberto

üí° *Para continuar, preciso que voc√™ escolha o tipo de contribuinte:*

1 - *Pessoa F√≠sica/Jur√≠dica* (C√≥digo do Contribuinte Geral)
2 - *Im√≥vel* (Inscri√ß√£o Imobili√°ria)
3 - *Empresa* (Inscri√ß√£o Municipal)

üìù *Digite o n√∫mero da op√ß√£o desejada:*

Ou digite *0* para voltar ao menu principal.`,
    };
  }

  /**
   * Processa a entrada do usu√°rio conforme a etapa atual
   * @param {string} sender - ID do usu√°rio
   * @param {string} message - Mensagem do usu√°rio
   * @returns {Object} Resposta para o usu√°rio
   */
  async processarEtapa(sender, message) {
    const msgLimpa = message.trim();

    // Verificar se o usu√°rio quer voltar ao menu principal
    if (msgLimpa === "0" || msgLimpa.toLowerCase() === "menu") {
      this.limparSessao(sender);
      return {
        type: "redirect",
        action: "menu_principal",
      };
    }

    const sessao = this.getSessao(sender);
    if (!sessao) {
      return this.iniciarConsultaDemonstrativo(sender, "usu√°rio");
    }

    console.log("[DemonstrativoFinanceiroService] Processando etapa:", {
      etapa: sessao.etapa,
      mensagem: msgLimpa,
      sessao: sessao,
    });

    switch (sessao.etapa) {
      case "tipo_contribuinte":
        return this.processarTipoContribuinte(sender, msgLimpa);
      case "codigo_contribuinte":
        return await this.processarCodigoContribuinte(sender, msgLimpa);
      default:
        return this.iniciarConsultaDemonstrativo(
          sender,
          sessao.nome || "usu√°rio"
        );
    }
  }

  /**
   * Processa a sele√ß√£o do tipo de contribuinte
   */
  processarTipoContribuinte(sender, msg) {
    const sessao = this.getSessao(sender);

    if (!["1", "2", "3"].includes(msg)) {
      return {
        type: "text",
        text: `‚ùå *Op√ß√£o inv√°lida!*

Por favor, digite uma das op√ß√µes dispon√≠veis:

1Ô∏è‚É£ *Pessoa F√≠sica/Jur√≠dica* (C√≥digo do Contribuinte Geral)
2Ô∏è‚É£ *Im√≥vel* (Inscri√ß√£o Imobili√°ria)
3Ô∏è‚É£ *Empresa* (Inscri√ß√£o Municipal)

üìù *Digite o n√∫mero da op√ß√£o desejada:*

Ou digite *0* para voltar ao menu principal.`,
      };
    }

    let tipoTexto = "";
    let campoTexto = "";

    switch (msg) {
      case "1":
        tipoTexto = "Pessoa F√≠sica/Jur√≠dica";
        campoTexto = "C√≥digo do Contribuinte Geral";
        break;
      case "2":
        tipoTexto = "Im√≥vel";
        campoTexto = "Inscri√ß√£o Imobili√°ria";
        break;
      case "3":
        tipoTexto = "Empresa";
        campoTexto = "Inscri√ß√£o Municipal";
        break;
    }

    // Atualizar sess√£o com o tipo selecionado
    this.updateSessao(sender, {
      etapa: "codigo_contribuinte",
      tipoContribuinte: msg,
      tipoTexto: tipoTexto,
      campoTexto: campoTexto,
    });

    return {
      type: "text",
      text: `‚úÖ *Tipo selecionado: ${tipoTexto}*

${sessao.nome}, agora preciso do ${campoTexto}.

üìç *Onde encontrar:*
${
  msg === "1"
    ? "‚Ä¢ Documentos da Prefeitura\n‚Ä¢ Carn√™s de tributos\n‚Ä¢ Certid√µes anteriores"
    : msg === "2"
    ? "‚Ä¢ Carn√™ do IPTU\n‚Ä¢ Escritura do im√≥vel\n‚Ä¢ Documentos do im√≥vel\n‚Ä¢ Portal do Contribuinte"
    : "‚Ä¢ Alvar√° de funcionamento\n‚Ä¢ Documentos da empresa\n‚Ä¢ Certid√µes municipais"
}

üìù *Digite apenas os n√∫meros* (sem pontos, tra√ßos ou espa√ßos):

Exemplo: 000000000012345 ou 12345

Ou digite *0* para voltar ao menu principal.`,
    };
  }

  /**
   * Processa o c√≥digo do contribuinte e executa a consulta
   */
  async processarCodigoContribuinte(sender, msg) {
    const inicioProcessamento = Date.now();
    const sessao = this.getSessao(sender);

    // Remove caracteres n√£o num√©ricos
    const codigoLimpo = msg.replace(/[^0-9]/g, "");

    console.log("[DemonstrativoFinanceiroService] Processando c√≥digo:", {
      codigoOriginal: msg,
      codigoLimpo: codigoLimpo,
      tipoContribuinte: sessao.tipoContribuinte,
      usandoCpfFake: true,
    });

    // Valida√ß√£o
    if (codigoLimpo.length === 0) {
      return {
        type: "text",
        text: `‚ùå *C√≥digo inv√°lido!*

Por favor, digite apenas n√∫meros.

üìù *Digite apenas os n√∫meros* (sem pontos, tra√ßos ou espa√ßos):

Exemplo: 000000000012345 ou 12345

Ou *0* para voltar ao menu principal.`,
      };
    }

    if (codigoLimpo.length < 2) {
      return {
        type: "text",
        text: `‚ùå *C√≥digo muito curto!*

O ${sessao.campoTexto} deve ter pelo menos 2 d√≠gitos.

üìù *Digite apenas os n√∫meros* (sem pontos, tra√ßos ou espa√ßos):

Exemplo: 000000000012345 ou 12345

Ou *0* para voltar ao menu principal.`,
      };
    }

    // Salvar o c√≥digo na sess√£o
    this.updateSessao(sender, {
      codigo: codigoLimpo,
    });

    // Executar a consulta diretamente
    this.metrics.tentativasConsulta++;

    const resultado = await this.executarConsulta(sender, codigoLimpo);

    // Calcular tempo de processamento
    const tempoProcessamento = Date.now() - inicioProcessamento;
    this.metrics.tempoMedioProcessamento.push(tempoProcessamento);

    // Manter apenas os √∫ltimos 100 tempos para c√°lculo da m√©dia
    if (this.metrics.tempoMedioProcessamento.length > 100) {
      this.metrics.tempoMedioProcessamento.shift();
    }

    return resultado;
  }

  /**
   * Executa a consulta na API e formata a resposta
   */
  async executarConsulta(sender, codigo) {
    const sessao = this.getSessao(sender);

    console.log(
      "[DemonstrativoFinanceiroService] Executando consulta com c√≥digo:",
      codigo,
      "tipo:",
      sessao.tipoContribuinte,
      "usando CPF fake:",
      this.cpfFake
    );

    try {
      // Montar par√¢metros da API
      const parametros = {
        SSEChave: "@C0sS0_@P1",
        SSETipoContribuinte: sessao.tipoContribuinte, // 1, 2 ou 3
        SSEInscricao: codigo,
        SSEExercicioDebito: "",
        SSETipoConsumo: "",
        SSENossoNumero: "",
        SSECPFCNPJ: this.cpfFake, // Usar CPF fake
        SSEOperacao: "1", // 1 = Demonstrativo Financeiro
        SSEIdentificador: "",
      };

      console.log("[DemonstrativoFinanceiroService] Par√¢metros da API:", {
        ...parametros,
        SSECPFCNPJ: "***FAKE***", // Mascarar nos logs
      });

      const response = await axios.get(this.apiUrl, {
        headers: {
          DadosAPIDocumento: JSON.stringify(parametros),
          "Content-Type": "application/json",
        },
        timeout: 30000, // 30 segundos
      });

      const resultado = response.data;

      console.log("[DemonstrativoFinanceiroService] Resultado da consulta:", {
        codigo: resultado.SSACodigo,
        mensagem: resultado.SSAMensagem,
        temLink: !!resultado.SSALinkDocumento,
        usouCpfFake: true,
      });

      if (resultado.SSACodigo === 0 && resultado.SSALinkDocumento) {
        // Sucesso - Demonstrativo encontrado
        this.metrics.sucessos++;
        this.limparSessao(sender);
        return this.formatarSucesso(resultado, sessao);
      } else if (resultado.SSACodigo === 0) {
        // Sucesso mas sem link do documento
        this.metrics.erros++;
        this.limparSessao(sender);
        return this.formatarSemDocumento(resultado, sessao);
      } else {
        // Erro na consulta
        this.metrics.erros++;
        this.limparSessao(sender);
        return this.formatarErroConsulta(resultado, sessao);
      }
    } catch (error) {
      console.error(
        "[DemonstrativoFinanceiroService] Erro na execu√ß√£o da consulta:",
        error
      );

      this.metrics.erros++;
      this.limparSessao(sender);
      return {
        type: "text",
        text: `‚ùå *Erro interno*

${sessao.nome}, ocorreu um erro inesperado durante a consulta.

üîÑ *Tentar novamente?*
Digite *7* para nova consulta de Demonstrativo Financeiro

üìß smfaz@arapiraca.al.gov.br

Ou digite *menu* para voltar ao menu principal.`,
      };
    }
  }

  /**
   * Formata resposta de sucesso
   */
  formatarSucesso(resultado, sessao) {
    let resposta = `‚úÖ *Demonstrativo Financeiro encontrado!*

${sessao.nome}, documento referente ao ${sessao.campoTexto}: ${sessao.codigo}

üìä *Informa√ß√µes Encontradas:*
`;

    // Adicionar informa√ß√µes dispon√≠veis
    if (resultado.SSAInscricao) {
      resposta += `‚Ä¢ **${sessao.campoTexto}:** ${resultado.SSAInscricao}\n`;
    }
    if (resultado.SSANomeRazao) {
      resposta += `‚Ä¢ **Nome/Raz√£o Social:** ${resultado.SSANomeRazao}\n`;
    }
    if (resultado.SSACPFCNPJ && resultado.SSACPFCNPJ !== this.cpfFake) {
      resposta += `‚Ä¢ **CPF/CNPJ:** ${resultado.SSACPFCNPJ}\n`;
    }
    if (resultado.SSALogradouro) {
      let endereco = resultado.SSALogradouro;
      if (resultado.SSANumero) endereco += `, ${resultado.SSANumero}`;
      if (resultado.SSAComplemento) endereco += `, ${resultado.SSAComplemento}`;
      resposta += `‚Ä¢ **Endere√ßo:** ${endereco}\n`;
    }
    if (resultado.SSABairro) {
      resposta += `‚Ä¢ **Bairro:** ${resultado.SSABairro}\n`;
    }

    resposta += `\nüìÑ *Documento Demonstrativo Financeiro:*
üîó [Clique aqui para baixar o Demonstrativo](${resultado.SSALinkDocumento})

‚ö†Ô∏è *IMPORTANTE:*
‚Ä¢ Link tempor√°rio - baixe/imprima *AGORA*!
‚Ä¢ V√°lido por tempo limitado
‚Ä¢ Salve o arquivo no seu celular

üí° *Sobre o Demonstrativo Financeiro:*
‚Ä¢ Cont√©m informa√ß√µes sobre d√©bitos pendentes
‚Ä¢ Mostra hist√≥rico de pagamentos
‚Ä¢ Documento oficial da Prefeitura
‚Ä¢ √ötil para regulariza√ß√£o fiscal

üîÑ *Precisa de outro Demonstrativo?*
Digite *7* para nova consulta

üìû *D√∫vidas:* smfaz@arapiraca.al.gov.br

Digite *menu* para voltar ao menu principal.`;

    return { type: "text", text: resposta };
  }

  /**
   * Formata resposta quando n√£o h√° documento dispon√≠vel
   */
  formatarSemDocumento(resultado, sessao) {
    return {
      type: "text",
      text: `‚ö†Ô∏è *Contribuinte encontrado, mas documento indispon√≠vel*

${sessao.nome}, o ${
        sessao.tipoTexto
      } foi localizado no sistema, mas o Demonstrativo Financeiro n√£o est√° dispon√≠vel para download no momento.

üìã *Dados encontrados:*
‚Ä¢ ${sessao.campoTexto}: ${resultado.SSAInscricao || "N√£o informado"}
‚Ä¢ Nome/Raz√£o Social: ${resultado.SSANomeRazao || "N√£o informado"}

üí° *O que fazer:*
‚Ä¢ Entre em contato conosco para obter o documento
‚Ä¢ Compare√ßa pessoalmente √† Secretaria da Fazenda
‚Ä¢ Tente novamente mais tarde

üîÑ *Tentar novamente?*
Digite *7* para nova consulta de Demonstrativo Financeiro

üìß *Contato:* smfaz@arapiraca.al.gov.br
üèõÔ∏è *Endere√ßo:* Secretaria da Fazenda Municipal
üìû *Telefone:* (82) 3539-6000

Digite *menu* para voltar ao menu principal.`,
    };
  }

  /**
   * Formata resposta de erro da API
   */
  formatarErroConsulta(resultado, sessao) {
    return {
      type: "text",
      text: `‚ùå *Erro na consulta*

${
  sessao.nome
}, n√£o foi poss√≠vel consultar o Demonstrativo Financeiro no momento.

üîç *Detalhes:* ${resultado.SSAMensagem || "Erro desconhecido"}

üí° *Poss√≠veis motivos:*
‚Ä¢ ${sessao.campoTexto} n√£o encontrado
‚Ä¢ ${sessao.tipoTexto} n√£o cadastrado no sistema
‚Ä¢ Sistema temporariamente indispon√≠vel
‚Ä¢ Dados incorretos

‚úÖ *Dicas para resolver:*
‚Ä¢ Verifique o c√≥digo nos documentos oficiais
‚Ä¢ Confirme se digitou apenas n√∫meros
‚Ä¢ Tente sem zeros √† esquerda

üîÑ *Tentar novamente?*
Digite *7* para nova consulta de Demonstrativo Financeiro

üìß *Contato:* smfaz@arapiraca.al.gov.br
üìû *Telefone:* (82) 3539-6000

Ou digite *menu* para voltar ao menu principal.`,
    };
  }

  /**
   * Verifica se uma mensagem indica inten√ß√£o de consultar Demonstrativo Financeiro
   */
  detectarIntencaoDemonstrativo(message) {
    if (!message || typeof message !== "string") {
      return false;
    }

    const msgLimpa = message
      .toLowerCase()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "");

    const palavrasChave = [
      "demonstrativo financeiro",
      "demonstrativo",
      "financeiro",
      "debitos",
      "situacao fiscal",
      "historico pagamentos",
      "regularizacao",
      "situacao contribuinte",
      "extrato fiscal",
      "posicao fiscal",
    ];

    return palavrasChave.some((palavra) => msgLimpa.includes(palavra));
  }

  /**
   * Obt√©m m√©tricas do servi√ßo
   * @returns {object} M√©tricas atuais
   */
  obterMetricas() {
    const tempoMedio =
      this.metrics.tempoMedioProcessamento.length > 0
        ? this.metrics.tempoMedioProcessamento.reduce((a, b) => a + b, 0) /
          this.metrics.tempoMedioProcessamento.length
        : 0;

    return {
      ...this.metrics,
      tempoMedioProcessamento: Math.round(tempoMedio),
      taxaSucesso:
        this.metrics.tentativasConsulta > 0
          ? Math.round(
              (this.metrics.sucessos / this.metrics.tentativasConsulta) * 100
            )
          : 0,
      sessoesAtivas: this.sessoes.size,
    };
  }

  /**
   * Reseta m√©tricas (executar periodicamente)
   */
  resetarMetricas() {
    this.metrics.tentativasConsulta = 0;
    this.metrics.sucessos = 0;
    this.metrics.erros = 0;
    this.metrics.sessoesCriadas = 0;
    this.metrics.sessoesCanceladas = 0;
    this.metrics.tempoMedioProcessamento = [];

    console.log("[DemonstrativoFinanceiroService] M√©tricas resetadas", {
      timestamp: new Date().toISOString(),
    });
  }

  /**
   * Cancela sess√£o do usu√°rio
   * @param {string} sender - ID do usu√°rio
   * @returns {Object} Mensagem de cancelamento
   */
  cancelarSessao(sender) {
    const sessao = this.getSessao(sender);

    if (sessao) {
      this.limparSessao(sender);
      this.metrics.sessoesCanceladas++;

      console.log(
        "[DemonstrativoFinanceiroService] Sess√£o cancelada pelo usu√°rio",
        {
          sender,
          sessaoAnterior: sessao,
          timestamp: new Date().toISOString(),
        }
      );

      return {
        type: "text",
        text: `‚úÖ *Sess√£o de Demonstrativo Financeiro cancelada!*

Voc√™ voltou ao menu principal.

üìä *Para consultar Demonstrativo Financeiro novamente:*
Digite *7* ou *demonstrativo*

üìã *Outras op√ß√µes:*
‚Ä¢ Digite *menu* para ver todas as op√ß√µes
‚Ä¢ Digite *ajuda* para obter suporte`,
      };
    }

    return {
      type: "text",
      text: `‚ÑπÔ∏è Voc√™ n√£o tem nenhuma sess√£o de Demonstrativo Financeiro ativa no momento.

Digite *menu* para ver as op√ß√µes dispon√≠veis.`,
    };
  }

  /**
   * Obt√©m ajuda contextual para Demonstrativo Financeiro
   * @param {string} sender - ID do usu√°rio
   * @returns {Object} Mensagem de ajuda
   */
  obterAjudaContextual(sender) {
    const sessao = this.getSessao(sender);

    if (sessao) {
      if (sessao.etapa === "tipo_contribuinte") {
        return {
          type: "text",
          text: `üÜò *Ajuda - Demonstrativo Financeiro*

üìä *Tipos de Contribuinte:*

1Ô∏è‚É£ *Pessoa F√≠sica/Jur√≠dica*
‚Ä¢ Para cidad√£os e empresas em geral
‚Ä¢ C√≥digo do Contribuinte Geral

2Ô∏è‚É£ *Im√≥vel*
‚Ä¢ Para consultas relacionadas a im√≥veis
‚Ä¢ Inscri√ß√£o Imobili√°ria (carn√™ IPTU)

3Ô∏è‚É£ *Empresa*
‚Ä¢ Para empresas com inscri√ß√£o municipal
‚Ä¢ Inscri√ß√£o Municipal (alvar√°)

üìù *Digite o n√∫mero da op√ß√£o desejada*

üìû *Contato:* smfaz@arapiraca.al.gov.br

Digite *0* para voltar ao menu principal.`,
        };
      } else if (sessao.etapa === "codigo_contribuinte") {
        return {
          type: "text",
          text: `üÜò *Ajuda - ${sessao.campoTexto}*

üìç *Onde encontrar o ${sessao.campoTexto}:*
${
  sessao.tipoContribuinte === "1"
    ? "‚Ä¢ Documentos da Prefeitura\n‚Ä¢ Carn√™s de tributos\n‚Ä¢ Certid√µes anteriores"
    : sessao.tipoContribuinte === "2"
    ? "‚Ä¢ Carn√™ do IPTU\n‚Ä¢ Escritura do im√≥vel\n‚Ä¢ Documentos do im√≥vel\n‚Ä¢ Portal do Contribuinte"
    : "‚Ä¢ Alvar√° de funcionamento\n‚Ä¢ Documentos da empresa\n‚Ä¢ Certid√µes municipais"
}

üìù *Formato correto:*
‚Ä¢ Digite *apenas n√∫meros*
‚Ä¢ Sem pontos, tra√ßos ou espa√ßos
‚Ä¢ Exemplo: 000000000012345 ou 12345
‚Ä¢ Pode ter zeros √† esquerda ou n√£o

‚ùå *Problemas comuns:*
‚Ä¢ N√£o digite letras ou s√≠mbolos
‚Ä¢ Verifique se o c√≥digo est√° correto
‚Ä¢ Confirme nos documentos oficiais

üìû *Contato:* smfaz@arapiraca.al.gov.br

Digite *0* para voltar ao menu principal.`,
        };
      }
    }

    return {
      type: "text",
      text: `üÜò *Ajuda - Demonstrativo Financeiro*

üìä *O que √© o Demonstrativo Financeiro?*
Documento oficial com informa√ß√µes sobre:
‚Ä¢ D√©bitos pendentes
‚Ä¢ Hist√≥rico de pagamentos
‚Ä¢ Situa√ß√£o fiscal atual
‚Ä¢ Valores em aberto

üöÄ *Para consultar Demonstrativo Financeiro:*
Digite *7* ou *demonstrativo*

üìû *Outros canais:*
üåê Portal: https://arapiraca.abaco.com.br/eagata/portal/
üìß Email: smfaz@arapiraca.al.gov.br
üìû Telefone: (82) 3539-6000

‚è∞ *Hor√°rio de atendimento:*
Segunda a Sexta: 7h √†s 13h

üìã Digite *menu* para ver todas as op√ß√µes`,
    };
  }

  /**
   * Fun√ß√µes auxiliares para gerenciar sess√µes
   */
  getSessao(sender) {
    return this.sessoes.get(sender);
  }

  setSessao(sender, dados) {
    dados.timestamp = Date.now(); // Adicionar timestamp para expira√ß√£o
    console.log("[DemonstrativoFinanceiroService] Definindo sess√£o:", {
      sender,
      dados,
    });
    this.sessoes.set(sender, dados);
  }

  updateSessao(sender, novosDados) {
    const sessaoAtual = this.getSessao(sender) || {};
    const sessaoAtualizada = {
      ...sessaoAtual,
      ...novosDados,
      timestamp: Date.now(),
    };

    console.log("[DemonstrativoFinanceiroService] Atualizando sess√£o:", {
      sender,
      sessaoAnterior: sessaoAtual,
      novosDados,
      sessaoAtualizada,
    });

    this.setSessao(sender, sessaoAtualizada);
  }

  limparSessao(sender) {
    console.log("[DemonstrativoFinanceiroService] Limpando sess√£o:", sender);
    this.sessoes.delete(sender);
  }

  /**
   * M√©todo para debug - listar todas as sess√µes ativas
   */
  listarSessoes() {
    console.log("[DemonstrativoFinanceiroService] Sess√µes ativas:", {
      total: this.sessoes.size,
      sessoes: Array.from(this.sessoes.entries()),
    });
  }

  /**
   * M√©todo para obter estat√≠sticas do servi√ßo
   */
  obterEstatisticas() {
    return {
      sessoesAtivas: this.sessoes.size,
      usuarios: Array.from(this.sessoes.keys()),
      metricas: this.obterMetricas(),
    };
  }

  /**
   * Limpa sess√µes expiradas (executar periodicamente)
   */
  limparSessoesExpiradas() {
    const agora = Date.now();
    const TEMPO_EXPIRACAO = 10 * 60 * 1000; // 10 minutos

    for (const [sender, sessao] of this.sessoes.entries()) {
      if (sessao.timestamp && agora - sessao.timestamp > TEMPO_EXPIRACAO) {
        console.log(
          "[DemonstrativoFinanceiroService] Removendo sess√£o expirada:",
          sender
        );
        this.sessoes.delete(sender);
        this.metrics.sessoesCanceladas++;
      }
    }
  }
}

// Configurar limpeza autom√°tica de sess√µes expiradas
const demonstrativoFinanceiroServiceInstance =
  new DemonstrativoFinanceiroService();

setInterval(() => {
  demonstrativoFinanceiroServiceInstance.limparSessoesExpiradas();
}, 5 * 60 * 1000); // A cada 5 minutos

// Configurar reset de m√©tricas di√°rio
setInterval(() => {
  demonstrativoFinanceiroServiceInstance.resetarMetricas();
}, 24 * 60 * 60 * 1000); // A cada 24 horas

module.exports = { DemonstrativoFinanceiroService };
