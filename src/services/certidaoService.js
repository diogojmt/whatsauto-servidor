const {
  emitirCertidao,
  validarDadosCertidao,
} = require("../utils/certidaoApi");
const {
  obterEstadoUsuario,
  definirEstadoUsuario,
  obterDadosTemporarios,
  definirDadosTemporarios,
  limparDadosTemporarios,
} = require("./stateService");
const { ESTADOS, EMOJIS } = require("../config/constants");
const logger = require("../utils/logger");

// Constantes para tipos de contribuinte
const TIPOS_CONTRIBUINTE = {
  GERAL: "1",
  IMOVEL: "2",
};

const TIPOS_CONTRIBUINTE_LABELS = {
  [TIPOS_CONTRIBUINTE.GERAL]: "Pessoa F√≠sica/Jur√≠dica",
  [TIPOS_CONTRIBUINTE.IMOVEL]: "Im√≥vel",
};

// M√©tricas de monitoramento
const metrics = {
  tentativasEmissao: 0,
  sucessos: 0,
  erros: 0,
  sessoesCriadas: 0,
  sessoesCanceladas: 0,
  tempoMedioProcessamento: [],
};

// Cache simples para dados de contribuintes (TTL: 5 minutos)
const cacheContribuintes = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 minutos

// Rate limiting simples (m√°ximo 5 tentativas por usu√°rio por hora)
const rateLimiting = new Map();
const RATE_LIMIT_MAX = 5;
const RATE_LIMIT_WINDOW = 60 * 60 * 1000; // 1 hora

/**
 * Valida CPF usando algoritmo de d√≠gitos verificadores
 * @param {string} cpf - CPF limpo (apenas n√∫meros)
 * @returns {boolean} True se CPF √© v√°lido
 */
function validarCPF(cpf) {
  if (cpf.length !== 11 || /^(\d)\1{10}$/.test(cpf)) return false;

  let soma = 0;
  for (let i = 0; i < 9; i++) {
    soma += parseInt(cpf.charAt(i)) * (10 - i);
  }
  let resto = 11 - (soma % 11);
  let digito1 = resto < 2 ? 0 : resto;

  soma = 0;
  for (let i = 0; i < 10; i++) {
    soma += parseInt(cpf.charAt(i)) * (11 - i);
  }
  resto = 11 - (soma % 11);
  let digito2 = resto < 2 ? 0 : resto;

  return (
    digito1 === parseInt(cpf.charAt(9)) && digito2 === parseInt(cpf.charAt(10))
  );
}

/**
 * Valida CNPJ usando algoritmo de d√≠gitos verificadores
 * @param {string} cnpj - CNPJ limpo (apenas n√∫meros)
 * @returns {boolean} True se CNPJ √© v√°lido
 */
function validarCNPJ(cnpj) {
  if (cnpj.length !== 14 || /^(\d)\1{13}$/.test(cnpj)) return false;

  const calcularDigito = (cnpj, posicoes) => {
    let soma = 0;
    for (let i = 0; i < posicoes.length; i++) {
      soma += parseInt(cnpj.charAt(i)) * posicoes[i];
    }
    const resto = soma % 11;
    return resto < 2 ? 0 : 11 - resto;
  };

  const pos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];
  const pos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];

  const digito1 = calcularDigito(cnpj, pos1);
  const digito2 = calcularDigito(cnpj, pos2);

  return (
    digito1 === parseInt(cnpj.charAt(12)) &&
    digito2 === parseInt(cnpj.charAt(13))
  );
}

/**
 * Valida CPF ou CNPJ
 * @param {string} documento - Documento a ser validado
 * @returns {object} Resultado da valida√ß√£o
 */
function validarCpfCnpj(documento) {
  const limpo = documento.replace(/\D/g, "");

  if (limpo.length === 11) {
    return {
      valido: validarCPF(limpo),
      tipo: "CPF",
      documento: limpo,
    };
  } else if (limpo.length === 14) {
    return {
      valido: validarCNPJ(limpo),
      tipo: "CNPJ",
      documento: limpo,
    };
  }

  return {
    valido: false,
    tipo: null,
    documento: limpo,
  };
}

/**
 * Sanitiza entrada do usu√°rio
 * @param {string} input - Entrada do usu√°rio
 * @returns {string} Entrada sanitizada
 */
function sanitizarEntrada(input) {
  if (!input) return "";
  return input
    .toString()
    .trim()
    .replace(/[<>\"']/g, "");
}

/**
 * Valida sess√£o do usu√°rio
 * @param {string} sender - ID do usu√°rio
 * @returns {object} Resultado da valida√ß√£o
 */
function validarSessao(sender) {
  const dadosTemp = obterDadosTemporarios(sender);
  if (!dadosTemp) {
    definirEstadoUsuario(sender, ESTADOS.MENU_PRINCIPAL);
    metrics.sessoesCanceladas++;
    return {
      valida: false,
      mensagem: `${EMOJIS.ERRO} *Ops! Sua sess√£o expirou* ${EMOJIS.RELOGIO}

Isso acontece por seguran√ßa ap√≥s alguns minutos de inatividade.

Digite *certidao* para come√ßar novamente ou *menu* para ver outras op√ß√µes.`,
    };
  }
  return { valida: true, dados: dadosTemp };
}

/**
 * Verifica rate limiting para o usu√°rio
 * @param {string} sender - ID do usu√°rio
 * @returns {boolean} True se usu√°rio pode continuar
 */
function verificarRateLimit(sender) {
  const agora = Date.now();
  const userLimits = rateLimiting.get(sender) || {
    count: 0,
    resetTime: agora + RATE_LIMIT_WINDOW,
  };

  if (agora > userLimits.resetTime) {
    userLimits.count = 0;
    userLimits.resetTime = agora + RATE_LIMIT_WINDOW;
  }

  if (userLimits.count >= RATE_LIMIT_MAX) {
    return false;
  }

  userLimits.count++;
  rateLimiting.set(sender, userLimits);
  return true;
}

/**
 * Formata CPF/CNPJ para exibi√ß√£o
 * @param {string} documento - Documento limpo
 * @returns {string} Documento formatado
 */
function formatarDocumento(documento) {
  if (documento.length === 11) {
    return documento.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, "$1.$2.$3-$4");
  } else if (documento.length === 14) {
    return documento.replace(
      /(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/,
      "$1.$2.$3/$4-$5"
    );
  }
  return documento;
}

/**
 * Inicia o fluxo de emiss√£o de certid√£o
 * @param {string} sender - ID do usu√°rio
 * @param {string} nome - Nome do usu√°rio
 * @returns {string} Mensagem de in√≠cio do fluxo
 */
function iniciarFluxoCertidao(sender, nome) {
  // Verificar rate limiting
  if (!verificarRateLimit(sender)) {
    return `${EMOJIS.ERRO} *Muitas tentativas!* ${EMOJIS.RELOGIO}

Por seguran√ßa, voc√™ pode tentar novamente em 1 hora.

${EMOJIS.INFO} *Enquanto isso, voc√™ pode usar:*
üåê Portal do Contribuinte: https://arapiraca.abaco.com.br/eagata/portal/
üìß D√∫vidas: smfaz@arapiraca.al.gov.br
üìû Telefone: (82) 3539-6000`;
  }

  definirEstadoUsuario(sender, ESTADOS.AGUARDANDO_TIPO_CONTRIBUINTE);
  limparDadosTemporarios(sender);
  metrics.sessoesCriadas++;

  logger.info("Iniciando fluxo de certid√£o", {
    sender,
    nome,
    timestamp: new Date().toISOString(),
  });

  return `${EMOJIS.DOCUMENTO} *Emiss√£o R√°pida de Certid√µes* ${EMOJIS.RAIO}

Ol√° ${nome}! ${EMOJIS.SAUDACAO}

Vou te ajudar a emitir sua certid√£o de forma *autom√°tica e gratuita* em poucos passos!

${EMOJIS.INFO} *Caso n√£o consiga pelo WhatsApp:*
üåê Portal: https://arapiraca.abaco.com.br/eagata/portal/
üìß Suporte: smfaz@arapiraca.al.gov.br
üìû Telefone: (82) 3539-6000

---

${EMOJIS.PERGUNTA} *Primeiro, me diga que tipo de certid√£o voc√™ precisa:*

*1* ${EMOJIS.PESSOA} Pessoa F√≠sica ou Jur√≠dica
*2* ${EMOJIS.CASA} Im√≥vel/Propriedade

${EMOJIS.SETA} *Digite apenas o n√∫mero (1 ou 2):*`;
}

/**
 * Processa a escolha do tipo de contribuinte
 * @param {string} sender - ID do usu√°rio
 * @param {string} opcao - Op√ß√£o escolhida
 * @param {string} nome - Nome do usu√°rio
 * @returns {string} Pr√≥xima mensagem do fluxo
 */
function processarTipoContribuinte(sender, opcao, nome) {
  const opcaoLimpa = sanitizarEntrada(opcao);

  if (!TIPOS_CONTRIBUINTE_LABELS[opcaoLimpa]) {
    return `${EMOJIS.ERRO} *Op√ß√£o inv√°lida!* ${EMOJIS.CONFUSO}

Por favor, escolha uma das op√ß√µes dispon√≠veis:

*1* ${EMOJIS.PESSOA} Pessoa F√≠sica ou Jur√≠dica
*2* ${EMOJIS.CASA} Im√≥vel/Propriedade

${EMOJIS.SETA} *Digite apenas o n√∫mero 1 ou 2:*`;
  }

  // Salvar tipo escolhido
  definirDadosTemporarios(sender, { tipoContribuinte: opcaoLimpa });
  definirEstadoUsuario(sender, ESTADOS.AGUARDANDO_CPF_CNPJ);

  logger.info("Tipo de contribuinte selecionado", {
    sender,
    tipoContribuinte: opcaoLimpa,
    timestamp: new Date().toISOString(),
  });

  const tipoSelecionado = TIPOS_CONTRIBUINTE_LABELS[opcaoLimpa];
  const emojiTipo =
    opcaoLimpa === TIPOS_CONTRIBUINTE.GERAL ? EMOJIS.PESSOA : EMOJIS.CASA;

  return `${EMOJIS.SUCESSO} *Perfeito!* ${emojiTipo}

Voc√™ selecionou: *${tipoSelecionado}*

${EMOJIS.DOCUMENTO} *Agora preciso do seu CPF ou CNPJ:*

${EMOJIS.INFO} *Dicas importantes:*
‚Ä¢ Digite *apenas os n√∫meros* (sem pontos, tra√ßos ou barras)
‚Ä¢ CPF: 11 n√∫meros | CNPJ: 14 n√∫meros
‚Ä¢ Exemplo CPF: 12345678901
‚Ä¢ Exemplo CNPJ: 12345678000195

${EMOJIS.SETA} *Digite seu CPF ou CNPJ:*`;
}

/**
 * Processa o CPF/CNPJ informado
 * @param {string} sender - ID do usu√°rio
 * @param {string} cpfCnpj - CPF/CNPJ informado
 * @param {string} nome - Nome do usu√°rio
 * @returns {string} Pr√≥xima mensagem do fluxo
 */
function processarCpfCnpj(sender, cpfCnpj, nome) {
  const validacaoSessao = validarSessao(sender);
  if (!validacaoSessao.valida) {
    return validacaoSessao.mensagem;
  }

  const dadosTemp = validacaoSessao.dados;
  const cpfCnpjLimpo = sanitizarEntrada(cpfCnpj);

  // Valida√ß√£o avan√ßada de CPF/CNPJ
  const validacaoDoc = validarCpfCnpj(cpfCnpjLimpo);

  if (!validacaoDoc.valido) {
    let mensagemErro = `${EMOJIS.ERRO} *${
      validacaoDoc.tipo || "Documento"
    } inv√°lido!* ${EMOJIS.CONFUSO}

`;

    if (validacaoDoc.documento.length < 11) {
      mensagemErro += `Voc√™ digitou apenas ${validacaoDoc.documento.length} n√∫meros.

${EMOJIS.INFO} *Preciso de:*
‚Ä¢ CPF: exatamente 11 n√∫meros
‚Ä¢ CNPJ: exatamente 14 n√∫meros`;
    } else if (validacaoDoc.documento.length > 14) {
      mensagemErro += `Voc√™ digitou ${validacaoDoc.documento.length} n√∫meros (muito longo).

${EMOJIS.INFO} *Preciso de:*
‚Ä¢ CPF: exatamente 11 n√∫meros  
‚Ä¢ CNPJ: exatamente 14 n√∫meros`;
    } else if (
      validacaoDoc.documento.length === 11 ||
      validacaoDoc.documento.length === 14
    ) {
      mensagemErro += `Os d√≠gitos verificadores n√£o conferem.

${EMOJIS.INFO} *Verifique se digitou corretamente:*
‚Ä¢ Todos os n√∫meros est√£o corretos?
‚Ä¢ N√£o esqueceu nenhum d√≠gito?`;
    } else {
      mensagemErro += `${EMOJIS.INFO} *Formato correto:*
‚Ä¢ CPF: 11 n√∫meros (ex: 12345678901)
‚Ä¢ CNPJ: 14 n√∫meros (ex: 12345678000195)`;
    }

    mensagemErro += `

${EMOJIS.SETA} *
Digite novamente apenas os n√∫meros:*`;

    return mensagemErro;
  }

  // Salvar CPF/CNPJ validado
  definirDadosTemporarios(sender, {
    ...dadosTemp,
    cpfCnpj: validacaoDoc.documento,
    tipoDocumento: validacaoDoc.tipo,
  });

  definirEstadoUsuario(sender, ESTADOS.AGUARDANDO_INSCRICAO);

  logger.info("CPF/CNPJ processado", {
    sender,
    tipoDocumento: validacaoDoc.tipo,
    documentoMascarado: formatarDocumento(validacaoDoc.documento).replace(
      /\d(?=\d{4})/g,
      "*"
    ),
    timestamp: new Date().toISOString(),
  });

  const documentoFormatado = formatarDocumento(validacaoDoc.documento);
  const tipoContribuinte = dadosTemp.tipoContribuinte;

  // Mensagem personalizada baseada no tipo de contribuinte
  let mensagemInscricao = "";
  let exemploInscricao = "";
  let dicasInscricao = "";

  if (tipoContribuinte === TIPOS_CONTRIBUINTE.GERAL) {
    mensagemInscricao = "Agora preciso do n√∫mero do *Cadastro Geral*:";
    exemploInscricao = "‚Ä¢ Exemplo: 123456 ou 1234567890";
    dicasInscricao = `${EMOJIS.INFO} *Onde encontrar seu Cadastro Geral:*
‚Ä¢ Certid√µes anteriores
‚Ä¢ Cadastro na Prefeitura
‚Ä¢ Portal do Contribuinte`;
  } else {
    mensagemInscricao = "Agora preciso do n√∫mero da *Matr√≠cula do Im√≥vel*:";
    exemploInscricao = "‚Ä¢ Exemplo: 987654 ou 9876543210";
    dicasInscricao = `${EMOJIS.INFO} *Onde encontrar a Matr√≠cula do Im√≥vel:*
‚Ä¢ Carn√™ do IPTU
‚Ä¢ Escritura do im√≥vel
‚Ä¢ Certid√µes anteriores do im√≥vel
‚Ä¢ Portal do Contribuinte`;
  }

  return `${EMOJIS.SUCESSO} *${validacaoDoc.tipo} confirmado!* ${EMOJIS.VERIFICADO}

*Documento:* ${documentoFormatado}

${EMOJIS.DOCUMENTO} ${mensagemInscricao}

${dicasInscricao}

${EMOJIS.EXEMPLO} *Formato:*
‚Ä¢ Digite *apenas os n√∫meros*
${exemploInscricao}
‚Ä¢ Sem pontos, tra√ßos ou letras

${EMOJIS.SETA} *Digite o n√∫mero da inscri√ß√£o ou do cad. geral::*`;
}

/**
 * Processa a inscri√ß√£o e emite a certid√£o com retry autom√°tico
 * @param {string} sender - ID do usu√°rio
 * @param {string} inscricao - Inscri√ß√£o informada
 * @param {string} nome - Nome do usu√°rio
 * @returns {Promise<string>} Resultado da emiss√£o
 */
async function processarInscricaoEEmitir(sender, inscricao, nome) {
  const inicioProcessamento = Date.now();

  const validacaoSessao = validarSessao(sender);
  if (!validacaoSessao.valida) {
    return validacaoSessao.mensagem;
  }

  const dadosTemp = validacaoSessao.dados;
  const inscricaoLimpa = sanitizarEntrada(inscricao).replace(/\D/g, "");

  if (!inscricaoLimpa || inscricaoLimpa.length < 3) {
    return `${EMOJIS.ERRO} *Inscri√ß√£o muito curta!* ${EMOJIS.CONFUSO}

A inscri√ß√£o deve ter pelo menos 3 n√∫meros.

${EMOJIS.SETA} *Digite novamente o n√∫mero da ${
      dadosTemp.tipoContribuinte === TIPOS_CONTRIBUINTE.IMOVEL
        ? "matr√≠cula do im√≥vel"
        : "inscri√ß√£o"
    }:*`;
  }

  // Validar dados usando a API
  const validacao = validarDadosCertidao(
    dadosTemp.tipoContribuinte,
    inscricaoLimpa
  );

  if (!validacao.isValid) {
    logger.warn("Dados inv√°lidos para certid√£o", {
      sender,
      erros: validacao.errors,
      timestamp: new Date().toISOString(),
    });

    return `${EMOJIS.ERRO} *Dados inv√°lidos encontrados:* ${EMOJIS.ALERTA}

${validacao.errors.map((erro) => `‚Ä¢ ${erro}`).join("\n")}

${EMOJIS.INFO} *Dicas:*
‚Ä¢ Verifique se a inscri√ß√£o est√° correta
‚Ä¢ Confirme no seu carn√™ ou documento
‚Ä¢ Tente sem pontos, tra√ßos ou letras

${EMOJIS.SETA} *Digite novamente a ${
      dadosTemp.tipoContribuinte === TIPOS_CONTRIBUINTE.IMOVEL
        ? "matr√≠cula do im√≥vel"
        : "inscri√ß√£o"
    }:*`;
  }

  // Verificar cache primeiro
  const chaveCache = `${dadosTemp.cpfCnpj}_${inscricaoLimpa}_${dadosTemp.tipoContribuinte}`;
  const dadosCache = cacheContribuintes.get(chaveCache);

  if (dadosCache && Date.now() - dadosCache.timestamp < CACHE_TTL) {
    logger.info("Dados obtidos do cache", {
      sender,
      chaveCache: chaveCache.replace(dadosTemp.cpfCnpj, "***"),
      timestamp: new Date().toISOString(),
    });
  }

  // Limpar estado e dados tempor√°rios
  definirEstadoUsuario(sender, ESTADOS.MENU_PRINCIPAL);
  limparDadosTemporarios(sender);
  metrics.tentativasEmissao++;

  try {
    logger.info("Iniciando emiss√£o de certid√£o", {
      sender,
      tipoContribuinte: dadosTemp.tipoContribuinte,
      inscricao: inscricaoLimpa,
      timestamp: new Date().toISOString(),
    });

    // Fun√ß√£o de retry com backoff exponencial
    const emitirComRetry = async (tentativa = 1, maxTentativas = 3) => {
      try {
        const resultado = await emitirCertidao({
          tipoContribuinte: dadosTemp.tipoContribuinte,
          inscricao: inscricaoLimpa,
          cpfCnpj: dadosTemp.cpfCnpj,
          operacao: "2", // Certid√£o
        });
        return resultado;
      } catch (error) {
        if (tentativa < maxTentativas) {
          const delay = Math.pow(2, tentativa) * 1000; // Backoff exponencial
          logger.warn(
            `Tentativa ${tentativa} falhou, tentando novamente em ${delay}ms`,
            {
              sender,
              error: error.message,
              tentativa,
              timestamp: new Date().toISOString(),
            }
          );

          await new Promise((resolve) => setTimeout(resolve, delay));
          return emitirComRetry(tentativa + 1, maxTentativas);
        }
        throw error;
      }
    };

    const resultado = await emitirComRetry();

    // Calcular tempo de processamento
    const tempoProcessamento = Date.now() - inicioProcessamento;
    metrics.tempoMedioProcessamento.push(tempoProcessamento);

    // Manter apenas os √∫ltimos 100 tempos para c√°lculo da m√©dia
    if (metrics.tempoMedioProcessamento.length > 100) {
      metrics.tempoMedioProcessamento.shift();
    }

    if (resultado.SSACodigo === 0 && resultado.SSALinkDocumento) {
      metrics.sucessos++;

      // Salvar no cache
      cacheContribuintes.set(chaveCache, {
        dados: resultado,
        timestamp: Date.now(),
      });

      logger.info("Certid√£o emitida com sucesso", {
        sender,
        nomeContribuinte: resultado.SSANomeRazao,
        inscricao: resultado.SSAInscricao || inscricaoLimpa,
        tempoProcessamento,
        timestamp: new Date().toISOString(),
      });

      const nomeContribuinte = resultado.SSANomeRazao || "N√£o informado";
      const inscricaoFinal = resultado.SSAInscricao || inscricaoLimpa;
      const documentoFormatado = formatarDocumento(dadosTemp.cpfCnpj);
      const tipoDoc = dadosTemp.tipoDocumento;
      const tipoInscricao =
        dadosTemp.tipoContribuinte === TIPOS_CONTRIBUINTE.IMOVEL
          ? "Matr√≠cula"
          : "Inscri√ß√£o";

      return `${EMOJIS.SUCESSO} *Certid√£o emitida com sucesso!* ${EMOJIS.FESTA}

${EMOJIS.DOCUMENTO} *LINK DA CERTID√ÉO:*
${resultado.SSALinkDocumento}

${EMOJIS.INFO} *Dados da Certid√£o:*
üë§ *Nome/Raz√£o:* ${nomeContribuinte}
üìÑ *${tipoDoc}:* ${documentoFormatado}
üè∑Ô∏è *${tipoInscricao}:* ${inscricaoFinal}
‚è±Ô∏è *Processado em:* ${Math.round(tempoProcessamento / 1000)}s

${EMOJIS.ALERTA} *IMPORTANTE:*
‚Ä¢ Link tempor√°rio - baixe/imprima *AGORA*!
‚Ä¢ V√°lido por tempo limitado
‚Ä¢ Salve o arquivo no seu celular

${EMOJIS.AJUDA} *Precisa de outra certid√£o?*
Digite *certidao* ou *menu* para voltar.

${EMOJIS.AVALIACAO} *Gostou do atendimento?* Nos avalie!`;
    } else {
      metrics.erros++;

      logger.error("Erro na emiss√£o da certid√£o", {
        sender,
        codigoErro: resultado.SSACodigo,
        mensagemErro: resultado.SSAMensagem,
        timestamp: new Date().toISOString(),
      });

      const mensagemErro =
        resultado.SSAMensagem || "Erro n√£o especificado pelo sistema";

      return `${EMOJIS.ERRO} *N√£o foi poss√≠vel emitir a certid√£o* ${EMOJIS.TRISTE}

${EMOJIS.INFO} *Motivo:* ${mensagemErro}

${EMOJIS.SOLUCAO} *O que voc√™ pode fazer:*

1Ô∏è‚É£ *Verificar os dados:*
   ‚Ä¢ CPF/CNPJ est√° correto?
   ‚Ä¢ Inscri√ß√£o est√° correta?
   ‚Ä¢ Consulte seu carn√™ ou documento

2Ô∏è‚É£ *Tentar novamente:*
   Digite *certidao* para nova tentativa

3Ô∏è‚É£ *Usar outros canais:*
   üåê Portal: https://arapiraca.abaco.com.br/eagata/portal/
   üìß Email: smfaz@arapiraca.al.gov.br
   üìû Telefone: (82) 3539-6000

${EMOJIS.AJUDA} Digite *menu* para ver outras op√ß√µes.`;
    }
  } catch (error) {
    metrics.erros++;

    logger.error("Erro cr√≠tico na emiss√£o de certid√£o", {
      sender,
      error: error.message,
      stack: error.stack,
      dadosTemp: {
        tipoContribuinte: dadosTemp.tipoContribuinte,
        inscricao: inscricaoLimpa,
      },
      timestamp: new Date().toISOString(),
    });

    return `${EMOJIS.ERRO} *Ops! Problema t√©cnico no sistema* ${EMOJIS.FERRAMENTA}

Nossos servidores est√£o com instabilidade no momento.

${EMOJIS.SOLUCAO} *Solu√ß√µes:*

1Ô∏è‚É£ *Tente novamente em 5 minutos:*
   Digite *certidao*

2Ô∏è‚É£ *Use o Portal do Contribuinte:*
   üåê https://arapiraca.abaco.com.br/eagata/portal/

3Ô∏è‚É£ *Entre em contato:*
   üìß smfaz@arapiraca.al.gov.br
   üìû (82) 3539-6000

${EMOJIS.INFO} *Hor√°rio de atendimento:*
Segunda a Sexta: 7h √†s 13h

Desculpe o transtorno! ${EMOJIS.DESCULPA}`;
  }
}

/**
 * Verifica se a mensagem √© uma solicita√ß√£o de emiss√£o de certid√£o
 * @param {string} msgLimpa - Mensagem normalizada
 * @returns {boolean} True se √© solicita√ß√£o de certid√£o
 */
function ehSolicitacaoCertidao(msgLimpa) {
  const palavrasChave = [
    "emitir certidao",
    "emitir certid√£o",
    "certidao automatica",
    "certid√£o automatica",
    "certidao autom√°tica",
    "certid√£o autom√°tica",
    "gerar certidao",
    "gerar certid√£o",
    "solicitar certidao",
    "solicitar certid√£o",
    "nova certidao",
    "nova certid√£o",
    "certidao negativa",
    "certid√£o negativa",
    "certidao positiva",
    "certid√£o positiva",
    "emissao automatica",
    "emiss√£o automatica",
    "emiss√£o autom√°tica",
    "emissao autom√°tica",
    "certidao",
    "certid√£o",
    "documento fiscal",
    "comprovante fiscal",
    "regularidade fiscal",
  ];

  return palavrasChave.some((palavra) => msgLimpa.includes(palavra));
}

/**
 * Obt√©m m√©tricas do servi√ßo
 * @returns {object} M√©tricas atuais
 */
function obterMetricas() {
  const tempoMedio =
    metrics.tempoMedioProcessamento.length > 0
      ? metrics.tempoMedioProcessamento.reduce((a, b) => a + b, 0) /
        metrics.tempoMedioProcessamento.length
      : 0;

  return {
    ...metrics,
    tempoMedioProcessamento: Math.round(tempoMedio),
    taxaSucesso:
      metrics.tentativasEmissao > 0
        ? Math.round((metrics.sucessos / metrics.tentativasEmissao) * 100)
        : 0,
    cacheSize: cacheContribuintes.size,
    rateLimitingActive: rateLimiting.size,
  };
}

/**
 * Limpa cache expirado (executar periodicamente)
 */
function limparCacheExpirado() {
  const agora = Date.now();
  for (const [chave, dados] of cacheContribuintes.entries()) {
    if (agora - dados.timestamp > CACHE_TTL) {
      cacheContribuintes.delete(chave);
    }
  }
}

/**
 * Limpa rate limiting expirado (executar periodicamente)
 */
function limparRateLimitingExpirado() {
  const agora = Date.now();
  for (const [sender, dados] of rateLimiting.entries()) {
    if (agora > dados.resetTime) {
      rateLimiting.delete(sender);
    }
  }
}

/**
 * Reseta m√©tricas (executar diariamente)
 */
function resetarMetricas() {
  metrics.tentativasEmissao = 0;
  metrics.sucessos = 0;
  metrics.erros = 0;
  metrics.sessoesCriadas = 0;
  metrics.sessoesCanceladas = 0;
  metrics.tempoMedioProcessamento = [];

  logger.info("M√©tricas resetadas", {
    timestamp: new Date().toISOString(),
  });
}

/**
 * Cancela sess√£o do usu√°rio
 * @param {string} sender - ID do usu√°rio
 * @returns {string} Mensagem de cancelamento
 */
function cancelarSessao(sender) {
  const estado = obterEstadoUsuario(sender);

  if (estado && estado !== ESTADOS.MENU_PRINCIPAL) {
    definirEstadoUsuario(sender, ESTADOS.MENU_PRINCIPAL);
    limparDadosTemporarios(sender);
    metrics.sessoesCanceladas++;

    logger.info("Sess√£o cancelada pelo usu√°rio", {
      sender,
      estadoAnterior: estado,
      timestamp: new Date().toISOString(),
    });

    return `${EMOJIS.SUCESSO} *Sess√£o cancelada!* ${EMOJIS.VERIFICADO}

Voc√™ voltou ao menu principal.

${EMOJIS.AJUDA} *O que deseja fazer?*
‚Ä¢ Digite *certidao* para emitir certid√£o
‚Ä¢ Digite *menu* para ver todas as op√ß√µes
‚Ä¢ Digite *ajuda* para obter suporte`;
  }

  return `${EMOJIS.INFO} Voc√™ n√£o tem nenhuma sess√£o ativa no momento.

Digite *menu* para ver as op√ß√µes dispon√≠veis.`;
}

/**
 * Obt√©m ajuda contextual baseada no estado atual
 * @param {string} sender - ID do usu√°rio
 * @returns {string} Mensagem de ajuda
 */
function obterAjudaContextual(sender) {
  const estado = obterEstadoUsuario(sender);
  const dadosTemp = obterDadosTemporarios(sender);

  switch (estado) {
    case ESTADOS.AGUARDANDO_TIPO_CONTRIBUINTE:
      return `${EMOJIS.AJUDA} *Ajuda - Tipo de Contribuinte*

Voc√™ precisa escolher entre:

*1* ${EMOJIS.PESSOA} *Pessoa F√≠sica/Jur√≠dica*
   ‚Ä¢ Para CPF ou CNPJ
   ‚Ä¢ Certid√£o de pessoa ou empresa
   
*2* ${EMOJIS.CASA} *Im√≥vel/Propriedade*  
   ‚Ä¢ Para propriedades/terrenos
   ‚Ä¢ Certid√£o de im√≥vel

${EMOJIS.SETA} Digite *1* ou *2*
${EMOJIS.CANCELAR} Digite *cancelar* para sair`;

    case ESTADOS.AGUARDANDO_CPF_CNPJ:
      return `${EMOJIS.AJUDA} *Ajuda - CPF/CNPJ*

${EMOJIS.INFO} *Formato correto:*
‚Ä¢ *CPF:* 11 n√∫meros (ex: 12345678901)
‚Ä¢ *CNPJ:* 14 n√∫meros (ex: 12345678000195)
‚Ä¢ *Apenas n√∫meros* - sem pontos, tra√ßos ou barras

${EMOJIS.EXEMPLO} *Onde encontrar:*
‚Ä¢ RG, CNH, Carteira de Trabalho (CPF)
‚Ä¢ Contrato Social, Cart√£o CNPJ (CNPJ)

${EMOJIS.SETA} Digite seu CPF ou CNPJ
${EMOJIS.CANCELAR} Digite *cancelar* para sair`;

    case ESTADOS.AGUARDANDO_INSCRICAO:
      const tipoInscricao =
        dadosTemp?.tipoContribuinte === TIPOS_CONTRIBUINTE.IMOVEL
          ? "Matr√≠cula do Im√≥vel"
          : "Cadastro Geral";

      return `${EMOJIS.AJUDA} *Ajuda - ${tipoInscricao}*

${EMOJIS.INFO} *Onde encontrar:*
${
  dadosTemp?.tipoContribuinte === TIPOS_CONTRIBUINTE.IMOVEL
    ? `
‚Ä¢ Carn√™ do IPTU
‚Ä¢ Escritura do im√≥vel  
‚Ä¢ Certid√µes anteriores do im√≥vel
‚Ä¢ Portal do Contribuinte`
    : `
‚Ä¢ Certid√µes anteriores
‚Ä¢ Cadastro na Prefeitura
‚Ä¢ Portal do Contribuinte`
}

${EMOJIS.EXEMPLO} *Formato:*
‚Ä¢ Apenas n√∫meros
‚Ä¢ Sem pontos, tra√ßos ou letras
‚Ä¢ Exemplo: 123456 ou 1234567890

${EMOJIS.SETA} Digite o n√∫mero da ${tipoInscricao.toLowerCase()}
${EMOJIS.CANCELAR} Digite *cancelar* para sair`;

    default:
      return `${EMOJIS.AJUDA} *Central de Ajuda*

${EMOJIS.DOCUMENTO} *Para emitir certid√£o:*
Digite *certidao*

${EMOJIS.INFO} *Outros canais de atendimento:*
üåê Portal: https://arapiraca.abaco.com.br/eagata/portal/
üìß Email: smfaz@arapiraca.al.gov.br  
üìû Telefone: (82) 3539-6000

${EMOJIS.RELOGIO} *Hor√°rio de atendimento:*
Segunda a Sexta: 7h √†s 13h

${EMOJIS.MENU} Digite *menu* para ver todas as op√ß√µes`;
  }
}

// Configurar limpeza autom√°tica de cache e rate limiting
setInterval(() => {
  limparCacheExpirado();
  limparRateLimitingExpirado();
}, 5 * 60 * 1000); // A cada 5 minutos

// Configurar reset de m√©tricas di√°rio
setInterval(() => {
  resetarMetricas();
}, 24 * 60 * 60 * 1000); // A cada 24 horas

module.exports = {
  iniciarFluxoCertidao,
  processarTipoContribuinte,
  processarCpfCnpj,
  processarInscricaoEEmitir,
  ehSolicitacaoCertidao,
  cancelarSessao,
  obterAjudaContextual,
  obterMetricas,
  limparCacheExpirado,
  limparRateLimitingExpirado,
  resetarMetricas,

  // Constantes exportadas para uso em outros m√≥dulos
  TIPOS_CONTRIBUINTE,
  TIPOS_CONTRIBUINTE_LABELS,
};
