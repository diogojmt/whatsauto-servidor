const { emitirCertidao, validarDadosCertidao } = require('../utils/certidaoApi');
const { consultarInscricoesPorCpf } = require('../utils/consultaApi');
const { obterEstadoUsuario, definirEstadoUsuario, obterDadosTemporarios, definirDadosTemporarios, limparDadosTemporarios } = require('./stateService');
const { ESTADOS, EMOJIS } = require('../config/constants');

/**
 * Inicia o fluxo de emiss√£o de certid√£o
 * @param {string} sender - ID do usu√°rio
 * @param {string} nome - Nome do usu√°rio
 * @returns {string} Mensagem de in√≠cio do fluxo
 */
function iniciarFluxoCertidao(sender, nome) {
  definirEstadoUsuario(sender, ESTADOS.AGUARDANDO_TIPO_CONTRIBUINTE);
  limparDadosTemporarios(sender);

  return `${EMOJIS.DOCUMENTO} *Emiss√£o Autom√°tica de Certid√µes*

${nome}, vou te ajudar a emitir sua certid√£o de forma r√°pida e autom√°tica!

${EMOJIS.INFO} *Se n√£o conseguir automaticamente, voc√™ pode:*
üîó Portal do Contribuinte: https://arapiraca.abaco.com.br/eagata/portal/

üìß *D√∫vidas:* smfaz@arapiraca.al.gov.br

---

Para come√ßar, preciso saber o *tipo de contribuinte*:

*1* - Pessoa F√≠sica ou Jur√≠dica (PF/PJ)
*2* - Im√≥vel
*3* - Empresa

Digite o n√∫mero correspondente:`;
}

/**
 * Processa a escolha do tipo de contribuinte
 * @param {string} sender - ID do usu√°rio
 * @param {string} opcao - Op√ß√£o escolhida
 * @param {string} nome - Nome do usu√°rio
 * @returns {string} Pr√≥xima mensagem do fluxo
 */
function processarTipoContribuinte(sender, opcao, nome) {
  const tiposValidos = {
    '1': 'Pessoa F√≠sica/Jur√≠dica',
    '2': 'Im√≥vel',
    '3': 'Empresa'
  };

  if (!tiposValidos[opcao]) {
    return `${EMOJIS.ERRO} Op√ß√£o inv√°lida! Por favor, digite:

*1* - Pessoa F√≠sica ou Jur√≠dica (PF/PJ)
*2* - Im√≥vel  
*3* - Empresa

Digite apenas o n√∫mero:`;
  }

  // Salvar tipo escolhido
  definirDadosTemporarios(sender, { tipoContribuinte: opcao });
  definirEstadoUsuario(sender, ESTADOS.AGUARDANDO_CPF_CNPJ);

  return `${EMOJIS.SUCESSO} Tipo selecionado: *${tiposValidos[opcao]}*

Agora preciso do seu *CPF/CNPJ*:

${EMOJIS.INFO} Digite apenas os n√∫meros (sem pontos, tra√ßos ou barras):`;
}

/**
 * Processa o CPF/CNPJ informado e busca inscri√ß√µes vinculadas
 * @param {string} sender - ID do usu√°rio
 * @param {string} cpfCnpj - CPF/CNPJ informado
 * @param {string} nome - Nome do usu√°rio
 * @returns {Promise<string>} Pr√≥xima mensagem do fluxo
 */
async function processarCpfCnpj(sender, cpfCnpj, nome) {
  const dadosTemp = obterDadosTemporarios(sender);
  
  if (!dadosTemp || !dadosTemp.tipoContribuinte) {
    definirEstadoUsuario(sender, ESTADOS.MENU_PRINCIPAL);
    return `${EMOJIS.ERRO} Sess√£o expirada. Digite *menu* para come√ßar novamente.`;
  }

  // Valida√ß√£o b√°sica de CPF/CNPJ
  const cpfCnpjLimpo = cpfCnpj.replace(/\D/g, '');
  
  if (cpfCnpjLimpo.length !== 11 && cpfCnpjLimpo.length !== 14) {
    return `${EMOJIS.ERRO} CPF deve ter 11 d√≠gitos ou CNPJ deve ter 14 d√≠gitos.

Digite novamente apenas os n√∫meros:`;
  }

  // Salvar CPF/CNPJ
  definirDadosTemporarios(sender, { 
    ...dadosTemp, 
    cpfCnpj: cpfCnpjLimpo 
  });

  // Tentar buscar inscri√ß√µes vinculadas ao CPF/CNPJ
  try {
    console.log(`üîç Buscando inscri√ß√µes para CPF/CNPJ: ${cpfCnpjLimpo}`);
    
    const resultadoConsulta = await consultarInscricoesPorCpf(cpfCnpjLimpo);
    
    if (resultadoConsulta.sucesso && resultadoConsulta.inscricoes.length > 1) {
      // M√∫ltiplas inscri√ß√µes encontradas - permitir sele√ß√£o
      definirDadosTemporarios(sender, {
        ...dadosTemp,
        cpfCnpj: cpfCnpjLimpo,
        inscricoesDisponiveis: resultadoConsulta.inscricoes
      });
      definirEstadoUsuario(sender, ESTADOS.AGUARDANDO_SELECAO_INSCRICAO);

      return gerarMenuSelecaoInscricao(resultadoConsulta.inscricoes, nome);
      
    } else if (resultadoConsulta.sucesso && resultadoConsulta.inscricoes.length === 1) {
      // Uma √∫nica inscri√ß√£o encontrada - usar automaticamente
      const inscricao = resultadoConsulta.inscricoes[0];
      definirDadosTemporarios(sender, {
        ...dadosTemp,
        cpfCnpj: cpfCnpjLimpo,
        inscricaoSelecionada: inscricao.inscricao
      });
      
      return await emitirCertidaoAutomatica(sender, nome);
      
    } else {
      // Nenhuma inscri√ß√£o encontrada ou API n√£o suporta - continuar com fluxo manual
      console.log('‚ÑπÔ∏è Consulta n√£o retornou inscri√ß√µes, continuando com fluxo manual');
      definirEstadoUsuario(sender, ESTADOS.AGUARDANDO_INSCRICAO);
      
      return `${EMOJIS.SUCESSO} CPF/CNPJ registrado: *${cpfCnpjLimpo}*

Agora preciso da sua *inscri√ß√£o municipal*:

${EMOJIS.INFO} Digite apenas os n√∫meros da sua inscri√ß√£o (sem pontos, tra√ßos ou letras):`;
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao consultar inscri√ß√µes:', error);
    
    // Em caso de erro, continuar com fluxo manual
    definirEstadoUsuario(sender, ESTADOS.AGUARDANDO_INSCRICAO);
    
    return `${EMOJIS.SUCESSO} CPF/CNPJ registrado: *${cpfCnpjLimpo}*

Agora preciso da sua *inscri√ß√£o municipal*:

${EMOJIS.INFO} Digite apenas os n√∫meros da sua inscri√ß√£o (sem pontos, tra√ßos ou letras):`;
  }
}

/**
 * Gera menu de sele√ß√£o de inscri√ß√µes
 * @param {Array} inscricoes - Lista de inscri√ß√µes dispon√≠veis
 * @param {string} nome - Nome do usu√°rio
 * @returns {string} Menu de sele√ß√£o
 */
function gerarMenuSelecaoInscricao(inscricoes, nome) {
  let menu = `${EMOJIS.SUCESSO} *Encontrei ${inscricoes.length} inscri√ß√µes para este CPF/CNPJ!*

${nome}, selecione qual inscri√ß√£o deseja usar:

`;

  inscricoes.forEach((inscricao, index) => {
    const numero = index + 1;
    menu += `*${numero}* - Inscri√ß√£o: ${inscricao.inscricao}
   ${EMOJIS.INFO} ${inscricao.nome}
   üìç ${inscricao.endereco}

`;
  });

  menu += `Digite o n√∫mero da inscri√ß√£o desejada (1-${inscricoes.length}):`;
  
  return menu;
}

/**
 * Processa sele√ß√£o de inscri√ß√£o pelo usu√°rio
 * @param {string} sender - ID do usu√°rio
 * @param {string} opcao - Op√ß√£o selecionada
 * @param {string} nome - Nome do usu√°rio
 * @returns {Promise<string>} Resultado da sele√ß√£o
 */
async function processarSelecaoInscricao(sender, opcao, nome) {
  const dadosTemp = obterDadosTemporarios(sender);
  
  if (!dadosTemp || !dadosTemp.inscricoesDisponiveis) {
    definirEstadoUsuario(sender, ESTADOS.MENU_PRINCIPAL);
    return `${EMOJIS.ERRO} Sess√£o expirada. Digite *menu* para come√ßar novamente.`;
  }

  const numeroSelecionado = parseInt(opcao);
  const inscricoes = dadosTemp.inscricoesDisponiveis;
  
  if (isNaN(numeroSelecionado) || numeroSelecionado < 1 || numeroSelecionado > inscricoes.length) {
    return `${EMOJIS.ERRO} Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a ${inscricoes.length}:`;
  }

  const inscricaoSelecionada = inscricoes[numeroSelecionado - 1];
  
  // Salvar inscri√ß√£o selecionada
  definirDadosTemporarios(sender, {
    ...dadosTemp,
    inscricaoSelecionada: inscricaoSelecionada.inscricao
  });

  return await emitirCertidaoAutomatica(sender, nome);
}

/**
 * Emite certid√£o automaticamente com dados j√° coletados
 * @param {string} sender - ID do usu√°rio
 * @param {string} nome - Nome do usu√°rio
 * @returns {Promise<string>} Resultado da emiss√£o
 */
async function emitirCertidaoAutomatica(sender, nome) {
  const dadosTemp = obterDadosTemporarios(sender);
  
  if (!dadosTemp || !dadosTemp.tipoContribuinte || !dadosTemp.cpfCnpj || !dadosTemp.inscricaoSelecionada) {
    definirEstadoUsuario(sender, ESTADOS.MENU_PRINCIPAL);
    return `${EMOJIS.ERRO} Dados insuficientes. Digite *menu* para come√ßar novamente.`;
  }

  // Limpar estado e dados tempor√°rios
  definirEstadoUsuario(sender, ESTADOS.MENU_PRINCIPAL);
  limparDadosTemporarios(sender);

  try {
    // Emitir certid√£o
    const resultado = await emitirCertidao({
      tipoContribuinte: dadosTemp.tipoContribuinte,
      inscricao: dadosTemp.inscricaoSelecionada,
      cpfCnpj: dadosTemp.cpfCnpj,
      operacao: "2" // Certid√£o
    });

    if (resultado.SSACodigo === 0 && resultado.SSALinkDocumento) {
      return `${EMOJIS.SUCESSO} *Certid√£o emitida com sucesso!*

${EMOJIS.DOCUMENTO} *Link da certid√£o:*
${resultado.SSALinkDocumento}

${EMOJIS.INFO} *Contribuinte:* ${resultado.SSANomeRazao || 'N/A'}
üìç *Inscri√ß√£o:* ${resultado.SSAInscricao || dadosTemp.inscricaoSelecionada}

‚ö†Ô∏è Link tempor√°rio - baixe/imprima logo!

Digite *menu* para voltar.`;
    } else {
      return `${EMOJIS.ERRO} *Erro na emiss√£o da certid√£o*

*Motivo:* ${resultado.SSAMensagem || 'Erro n√£o especificado'}

${EMOJIS.INFO} Tente novamente ou use o Portal do Contribuinte:
üîó https://arapiraca.abaco.com.br/eagata/portal/

Digite *menu* para voltar.`;
    }

  } catch (error) {
    console.error('Erro ao emitir certid√£o:', error);
    return `${EMOJIS.ERRO} *Erro no sistema*

Tente novamente em alguns minutos ou use o Portal:
üîó https://arapiraca.abaco.com.br/eagata/portal/
üìß smfaz@arapiraca.al.gov.br

Digite *menu* para voltar.`;
  }
}

/**
 * Processa a inscri√ß√£o municipal e emite a certid√£o
 * @param {string} sender - ID do usu√°rio
 * @param {string} inscricao - Inscri√ß√£o informada
 * @param {string} nome - Nome do usu√°rio
 * @returns {Promise<string>} Resultado da emiss√£o
 */
async function processarInscricaoEEmitir(sender, inscricao, nome) {
  const dadosTemp = obterDadosTemporarios(sender);
  
  if (!dadosTemp || !dadosTemp.tipoContribuinte || !dadosTemp.cpfCnpj) {
    definirEstadoUsuario(sender, ESTADOS.MENU_PRINCIPAL);
    return `${EMOJIS.ERRO} Sess√£o expirada. Digite *menu* para come√ßar novamente.`;
  }

  // Validar dados
  const validacao = validarDadosCertidao(dadosTemp.tipoContribuinte, inscricao);
  
  if (!validacao.isValid) {
    return `${EMOJIS.ERRO} Dados inv√°lidos:

${validacao.errors.map(erro => `‚Ä¢ ${erro}`).join('\n')}

Por favor, digite novamente sua inscri√ß√£o municipal (apenas n√∫meros):`;
  }

  // Limpar estado e dados tempor√°rios
  definirEstadoUsuario(sender, ESTADOS.MENU_PRINCIPAL);
  limparDadosTemporarios(sender);

  try {
    // Enviar indicador de processamento
    // (seria implementado no chatbot para mostrar "digitando...")

    // Emitir certid√£o
    const resultado = await emitirCertidao({
      tipoContribuinte: dadosTemp.tipoContribuinte,
      inscricao: inscricao.trim(),
      cpfCnpj: dadosTemp.cpfCnpj,
      operacao: "2" // Certid√£o
    });

    if (resultado.SSACodigo === 0 && resultado.SSALinkDocumento) {
      return `${EMOJIS.SUCESSO} *Certid√£o emitida com sucesso!*

${EMOJIS.DOCUMENTO} *Link da certid√£o:*
${resultado.SSALinkDocumento}

${EMOJIS.INFO} *Contribuinte:* ${resultado.SSANomeRazao || 'N/A'}
üìç *Inscri√ß√£o:* ${resultado.SSAInscricao || inscricao}

‚ö†Ô∏è Link tempor√°rio - baixe/imprima logo!

Digite *menu* para voltar.`;
    } else {
      return `${EMOJIS.ERRO} *Erro na emiss√£o da certid√£o*

*Motivo:* ${resultado.SSAMensagem || 'Erro n√£o especificado'}

${EMOJIS.INFO} Tente novamente ou use o Portal do Contribuinte:
üîó https://arapiraca.abaco.com.br/eagata/portal/

Digite *menu* para voltar.`;
    }

  } catch (error) {
    console.error('Erro ao emitir certid√£o:', error);
    return `${EMOJIS.ERRO} *Erro no sistema*

Tente novamente em alguns minutos ou use o Portal:
üîó https://arapiraca.abaco.com.br/eagata/portal/
üìß smfaz@arapiraca.al.gov.br

Digite *menu* para voltar.`;
  }
}

/**
 * Verifica se a mensagem √© uma solicita√ß√£o de emiss√£o de certid√£o
 * @param {string} msgLimpa - Mensagem normalizada
 * @returns {boolean} True se √© solicita√ß√£o de certid√£o
 */
function ehSolicitacaoCertidao(msgLimpa) {
  const palavrasChave = [
    'emitir certidao',
    'emitir certid√£o',
    'certidao automatica',
    'certid√£o automatica', 
    'certidao autom√°tica',
    'certid√£o autom√°tica',
    'gerar certidao',
    'gerar certid√£o',
    'solicitar certidao',
    'solicitar certid√£o',
    'nova certidao',
    'nova certid√£o',
    'certidao negativa',
    'certid√£o negativa',
    'certidao positiva',
    'certid√£o positiva',
    'emissao automatica',
    'emiss√£o automatica',
    'emiss√£o autom√°tica',
    'emissao autom√°tica'
  ];

  return palavrasChave.some(palavra => msgLimpa.includes(palavra));
}

module.exports = {
  iniciarFluxoCertidao,
  processarTipoContribuinte,
  processarCpfCnpj,
  processarSelecaoInscricao,
  processarInscricaoEEmitir,
  ehSolicitacaoCertidao
};
