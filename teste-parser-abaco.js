/**
 * Arquivo de teste para validar o parser atualizado com padr√µes da √Åbaco
 * 
 * Este arquivo demonstra como o parser agora extrai dados dos XMLs reais
 * retornados pelo webservice da √Åbaco.
 */

const { CadastroGeralService } = require('./src/services/cadastroGeralService');

// Exemplo de XML com padr√µes da √Åbaco (baseado na estrutura real)
const xmlExemploAbaco = `<?xml version="1.0" encoding="UTF-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <soap:Body>
    <PWSRetornoPertences.ExecuteResponse>
      <return>
        <SRPNomeContribuinte>Jo√£o da Silva Santos</SRPNomeContribuinte>
        <SRPCPFCNPJContribuinte>12345678901</SRPCPFCNPJContribuinte>
        <SRPCodigoContribuinte>123456</SRPCodigoContribuinte>
        
        <SRPInscricaoImovel>000000000057518</SRPInscricaoImovel>
        <SRPEnderecoImovel>Rua das Flores, 123 - Centro - Arapiraca/AL</SRPEnderecoImovel>
        <SRPTipoImovel>Predial</SRPTipoImovel>
        <SRPTipoProprietario>Principal</SRPTipoProprietario>
        <SRPPossuiDebitoImovel>Sim</SRPPossuiDebitoImovel>
        <SRPDebitoSuspensoImovel>N√£o</SRPDebitoSuspensoImovel>
        
        <SRPInscricaoImovel>000000000057519</SRPInscricaoImovel>
        <SRPEnderecoImovel>Av. Central, 456 - Bairro Novo - Arapiraca/AL</SRPEnderecoImovel>
        <SRPTipoImovel>Terreno</SRPTipoImovel>
        <SRPTipoProprietario>Co-propriet√°rio</SRPTipoProprietario>
        <SRPPossuiDebitoImovel>N√£o</SRPPossuiDebitoImovel>
        <SRPDebitoSuspensoImovel>N√£o</SRPDebitoSuspensoImovel>
      </return>
    </PWSRetornoPertences.ExecuteResponse>
  </soap:Body>
</soap:Envelope>`;

// Exemplo de XML com padr√µes gen√©ricos (retrocompatibilidade)
const xmlExemploGenerico = `<?xml version="1.0" encoding="UTF-8"?>
<response>
  <contribuinte>
    <nome>Maria dos Santos</nome>
    <cpf>98765432100</cpf>
    <codigo>654321</codigo>
  </contribuinte>
  <imoveis>
    <imovel>
      <inscricao>111111111111111</inscricao>
      <endereco>Rua Antiga, 789</endereco>
      <tipo_imovel>Residencial</tipo_imovel>
      <proprietario>Principal</proprietario>
      <possui_debito>false</possui_debito>
    </imovel>
  </imoveis>
</response>`;

/**
 * Fun√ß√£o para testar o parser com diferentes tipos de XML
 */
async function testarParser() {
  console.log('='.repeat(80));
  console.log('TESTE DO PARSER ATUALIZADO - PADR√ïES √ÅBACO');
  console.log('='.repeat(80));
  
  const service = new CadastroGeralService();
  
  // Teste 1: XML com padr√µes da √Åbaco
  console.log('\nüìã TESTE 1: XML com padr√µes espec√≠ficos da √Åbaco');
  console.log('-'.repeat(50));
  
  const resultadoAbaco = service.processarRespostaSoap(xmlExemploAbaco);
  console.log('\n‚úÖ Resultado da extra√ß√£o (Padr√µes √Åbaco):');
  console.log(JSON.stringify(resultadoAbaco, null, 2));
  
  // Teste da apresenta√ß√£o formatada
  const respostaFormatadaAbaco = service.formatarResposta(resultadoAbaco, '12345678901');
  console.log('\nüì± Resposta formatada para WhatsApp (Padr√µes √Åbaco):');
  console.log(respostaFormatadaAbaco.text);
  
  // Teste 2: XML com padr√µes gen√©ricos (retrocompatibilidade)
  console.log('\nüìã TESTE 2: XML com padr√µes gen√©ricos (Retrocompatibilidade)');
  console.log('-'.repeat(50));
  
  const resultadoGenerico = service.processarRespostaSoap(xmlExemploGenerico);
  console.log('\n‚úÖ Resultado da extra√ß√£o (Padr√µes Gen√©ricos):');
  console.log(JSON.stringify(resultadoGenerico, null, 2));
  
  // Teste da apresenta√ß√£o formatada
  const respostaFormatadaGenerica = service.formatarResposta(resultadoGenerico, '98765432100');
  console.log('\nüì± Resposta formatada para WhatsApp (Padr√µes Gen√©ricos):');
  console.log(respostaFormatadaGenerica.text);
  
  console.log('\n' + '='.repeat(80));
  console.log('RESUMO DOS TESTES');
  console.log('='.repeat(80));
  
  console.log('\n‚úÖ Padr√µes da √Åbaco:');
  console.log(`   - Contribuinte encontrado: ${resultadoAbaco.encontrado ? 'SIM' : 'N√ÉO'}`);
  console.log(`   - Nome extra√≠do: ${resultadoAbaco.contribuinte?.nome || 'N√ÉO'}`);
  console.log(`   - CPF/CNPJ extra√≠do: ${resultadoAbaco.contribuinte?.cpfCnpj || 'N√ÉO'}`);
  console.log(`   - C√≥digo extra√≠do: ${resultadoAbaco.contribuinte?.codigo || 'N√ÉO'}`);
  console.log(`   - Im√≥veis encontrados: ${resultadoAbaco.imoveis?.length || 0}`);
  
  console.log('\n‚úÖ Padr√µes Gen√©ricos (Retrocompatibilidade):');
  console.log(`   - Contribuinte encontrado: ${resultadoGenerico.encontrado ? 'SIM' : 'N√ÉO'}`);
  console.log(`   - Nome extra√≠do: ${resultadoGenerico.contribuinte?.nome || 'N√ÉO'}`);
  console.log(`   - CPF/CNPJ extra√≠do: ${resultadoGenerico.contribuinte?.cpfCnpj || 'N√ÉO'}`);
  console.log(`   - C√≥digo extra√≠do: ${resultadoGenerico.contribuinte?.codigo || 'N√ÉO'}`);
  console.log(`   - Im√≥veis encontrados: ${resultadoGenerico.imoveis?.length || 0}`);
  
  console.log('\nüéØ CONCLUS√ÉO: O parser est√° funcionando corretamente com ambos os formatos!');
}

/**
 * Fun√ß√£o para demonstrar como adicionar novos padr√µes
 */
function demonstrarAdicaoNovospadroes() {
  console.log('\n' + '='.repeat(80));
  console.log('COMO ADICIONAR NOVOS PADR√ïES DA √ÅBACO');
  console.log('='.repeat(80));
  
  console.log(`
üìù PASSOS PARA ADICIONAR NOVO PADR√ÉO:

1. üîç IDENTIFICAR NOVA TAG NO XML:
   - Consultar arquivo XML salvo em /logs/soap_response_*.xml
   - Localizar nova tag como: <SRPNovoCampo>valor</SRPNovoCamera>

2. ‚ûï ADICIONAR PADR√ÉO REGEX:
   - Localizar se√ß√£o "PADR√ïES ESPEC√çFICOS WEBSERVICE √ÅBACO"
   - Adicionar: /<SRPNovoCamera[^>]*>([^<]+)<\\/SRPNovoCamera>/gi

3. üîß ATUALIZAR L√ìGICA DE EXTRA√á√ÉO:
   - Em extrairDadosCompletos() ou extrairInformacoesDetalhadas()
   - Adicionar condi√ß√£o: else if (source.includes("srpnovocampo"))

4. üß™ TESTAR:
   - Usar XML real com nova tag
   - Verificar se extra√ß√£o est√° funcionando
   - Validar apresenta√ß√£o na resposta formatada

üìã EXEMPLO PR√ÅTICO:

// Nova tag encontrada no XML:
// <SRPValorIPTU>R$ 150,00</SRPValorIPTU>

// 1. Adicionar padr√£o:
/<SRPValorIPTU[^>]*>([^<]+)<\\/SRPValorIPTU>/gi

// 2. Adicionar l√≥gica:
else if (source.includes("srpvaloriptu")) {
  if (!imovel.valorIPTU) {
    imovel.valorIPTU = valor;
  }
}

// 3. Atualizar apresenta√ß√£o:
if (imovel.valorIPTU) {
  textoResposta += \`   üí∞ *IPTU:* \${imovel.valorIPTU}\\n\`;
}
`);
}

// Executar testes se arquivo for executado diretamente
if (require.main === module) {
  testarParser().then(() => {
    demonstrarAdicaoNovospadroes();
  }).catch(console.error);
}

module.exports = { testarParser, demonstrarAdicaoNovospadroes };
